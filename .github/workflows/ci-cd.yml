name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/orbit:latest -f Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/orbit:latest

  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16  # Specify the Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run Backend Tests
        run: npm run backend-test

      - name: Check Backend Coverage Directory
        run: ls .nyc_output || echo "Directory not found"

      - name: Upload Backend Coverage Report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage-report
          path: .nyc_output/  # Ensure this path matches where nyc output is stored

      - name: Send email on backend test success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Backend Tests Succeeded"
          body: "The backend tests have completed successfully."
          to: ${{ secrets.RECIPIENT_EMAIL }}
          from: ${{ secrets.EMAIL }}

      - name: Send email on backend test failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Backend Tests Failed"
          body: "The backend tests have failed."
          to: ${{ secrets.RECIPIENT_EMAIL }}
          from: ${{ secrets.EMAIL }}

  frontend-tests:
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16  # Specify the Node.js version

      - name: Install dependencies
        run: npm install

      - name: Instrument Frontend Code
        run: npm run frontend-instrument

      - name: Run Frontend Tests
        run: npm run frontend-test

      - name: Check Frontend Coverage Directory
        run: ls .nyc_output || echo "Directory not found"

      - name: Upload Frontend Coverage Report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-report
          path: .nyc_output/  # Ensure this path matches where nyc output is stored

      - name: Send email on frontend test success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Frontend Tests Succeeded"
          body: "The frontend tests have completed successfully."
          to: ${{ secrets.RECIPIENT_EMAIL }}
          from: ${{ secrets.EMAIL }}

      - name: Send email on frontend test failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Frontend Tests Failed"
          body: "The frontend tests have failed."
          to: ${{ secrets.RECIPIENT_EMAIL }}
          from: ${{ secrets.EMAIL }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          if [ ! -s ~/.kube/config ]; then
            echo "Decoded kubeconfig is empty or invalid!" >&2
            exit 1
          fi
          kubectl config view  # Ensure kubeconfig is valid
          kubectl version --client
          kubectl cluster-info

      - name: Check manifest files
        run: |
          if [ ! -f service.yaml ] || [ ! -f deployment.yaml ]; then
            echo "Required Kubernetes manifest files are missing!" >&2
            exit 1
          fi

      - name: Deploy Kubernetes resources
        run: |
          kubectl apply -f service.yaml
          sleep 5 && kubectl apply -f service.yaml
          kubectl apply -f deployment.yaml
          sleep 5 && kubectl apply -f deployment.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/my-app
          kubectl get all
          kubectl describe deployment my-app  # Debugging: View deployment details
          kubectl logs -l app=my-app-img          # Debugging: View logs for the application
